version: '3'
services:
    result:
        build: ./result
        volumes:
            - ./result:/app
            - /app/node_modules
        ports:
            - "${RESULT_PORT}:80"
        depends_on:
            - postgres
        container_name: "dev_result"
        restart: on-failure
        networks: 
            - result-tier
    postgres:
        image: postgres
        environment:
            POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        volumes:
            - ./db-data:/var/lib/postgresql/data
            - ./schema.sql:/docker-entrypoint-initdb.d/dump.sql
        ports: 
            - "${POSTGRES_PORT}:${POSTGRES_PORT}"
        container_name: "dev_postgres"
        restart: on-failure
        networks: 
            - result-tier
            - back-tier
    redis:
        image: redis
        ports:
            - "${REDIS_PORT}:${REDIS_PORT}"
        container_name: "dev_redis"
        restart: on-failure
        networks: 
            - poll-tier
            - back-tier
    worker:
        build: ./worker
        container_name: "dev_worker"
        #volumes: 
        #    - ./worker/src/main/java/worker/Worker.java:/usr/app
        restart: on-failure
        depends_on: 
            - postgres
        networks: 
            - back-tier
    poll:
        build: ./poll
        ports:
            - "${POLL_PORT}:80"
        volumes:
            - ./poll:/app
            - .env:/app/.env
        container_name: "dev_poll"
        restart: on-failure
        networks: 
            - poll-tier
networks: 
    poll-tier:
        driver: bridge
    result-tier:
        driver: bridge
    back-tier:
        driver: bridge